import asyncio
import sys
import os

# Add the workshop directory to the path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from utils import project_client, tc

# Import the agent modules
try:
    from resolution_agent import create_agent_from_prompt as create_resolution_agent
    from resolution_agent import post_message as post_to_resolution_agent
    HAS_RESOLUTION_AGENT = True
except ImportError:
    HAS_RESOLUTION_AGENT = False
    print("Warning: resolution_agent.py not found. Resolution agent will not be available.")

try:
    from benefits_agent import create_agent_from_prompt as create_benefits_agent
    from benefits_agent import post_message as post_to_benefits_agent
    HAS_BENEFITS_AGENT = True
except ImportError:
    HAS_BENEFITS_AGENT = False
    print("Warning: benefits_agent.py not found. Benefits agent will not be available.")

try:
    from report_agent import create_agent_from_prompt as create_report_agent
    from report_agent import post_message as post_to_report_agent
    HAS_REPORT_AGENT = True
except ImportError:
    HAS_REPORT_AGENT = False
    print("Warning: report_agent.py not found. Report agent will not be available.")

try:
    from monitor_agent import create_agent_from_prompt as create_monitor_agent
    from monitor_agent import post_message as post_to_monitor_agent
    HAS_MONITOR_AGENT = True
except ImportError:
    HAS_MONITOR_AGENT = False
    print("Warning: monitor_agent.py not found. Monitor agent will not be available.")


async def main() -> None:
    """Multi-agent workflow demonstrating all agents working together.

    This workflow:
    1. Resolution Agent: Diagnoses and resolves technical incidents
    2. Report Agent: Creates a ticket with resolution and sends to Slack FIRST
    3. Benefits Agent: Calculates financial impact and sends to Slack (references ticket ID)
    """

    # Use the project client within a context manager for the entire session
    with project_client:
        print("\n" + "="*80)
        print("MULTI-AGENT WORKFLOW: Resolution → Reporting → Benefits")
        print("="*80 + "\n")

        # Example incident scenario
        print(f"{tc.CYAN}Simulating an incident scenario...{tc.RESET}\n")

        incident_description = "VM 'webshop-prod-01' is experiencing high CPU usage at 95% for the past 30 minutes, affecting customer experience"

        print(f"{tc.YELLOW}Incident Report:{tc.RESET}")
        print(f"  {incident_description}\n")

        resolution_result = None
        vm_name = "webshop-prod-01"
        ticket_id = None  # Will be generated by report agent

        # Step 1: Resolution Agent handles the incident
        if HAS_RESOLUTION_AGENT:
            print(f"{tc.GREEN}{'='*80}{tc.RESET}")
            print(f"{tc.GREEN}STEP 1: RESOLUTION AGENT - Diagnosing and Resolving Issue{tc.RESET}")
            print(f"{tc.GREEN}{'='*80}{tc.RESET}\n")

            try:
                resolution_agent, resolution_thread = await create_resolution_agent()

                try:
                    resolution_result = await post_to_resolution_agent(
                        thread_id=resolution_thread.id,
                        content=incident_description,
                        agent=resolution_agent,
                        thread=resolution_thread
                    )

                    print(f"\n{tc.CYAN}Resolution Agent Output:{tc.RESET}")
                    print(f"  {resolution_result}\n")

                finally:
                    # Cleanup resolution agent
                    try:
                        project_client.agents.delete_agent(resolution_agent.id)
                        print(f"Deleted resolution agent: {resolution_agent.id}\n")
                    except Exception as e:
                        print(f"Error deleting resolution agent: {e}\n")

            except Exception as e:
                print(f"{tc.RED}Error in Resolution Agent: {e}{tc.RESET}\n")
                resolution_result = "Unable to resolve issue automatically"
        else:
            print(f"{tc.YELLOW}Resolution agent not available. Skipping resolution step.{tc.RESET}\n")
            resolution_result = "Issue resolved via automated reboot"

        # Step 2: Report Agent creates ticket and sends to Slack FIRST
        if HAS_REPORT_AGENT:
            print(f"{tc.GREEN}{'='*80}{tc.RESET}")
            print(f"{tc.GREEN}STEP 2: REPORT AGENT - Creating Ticket with Resolution & Sending to Slack{tc.RESET}")
            print(f"{tc.GREEN}{'='*80}{tc.RESET}\n")

            try:
                report_agent, report_thread = await create_report_agent()

                try:
                    # Construct the ticket creation request
                    ticket_query = f"""
                    Create a ticket for the following incident:

                    Incident: {incident_description}
                    Resolution: {resolution_result}
                    Severity: High
                    Affected System: {vm_name}

                    Please:
                    1. Generate a unique ticket ID (format: INC-YYYYMMDD-NNN)
                    2. Create a clear ticket title
                    3. Include the full resolution details
                    4. Extract and organize all relevant incident details
                    5. Format the ticket for Slack delivery
                    6. Send the ticket to Slack immediately
                    """

                    ticket_result = await post_to_report_agent(
                        thread_id=report_thread.id,
                        content=ticket_query,
                        agent=report_agent,
                        thread=report_thread
                    )

                    print(f"\n{tc.CYAN}Report Agent Output:{tc.RESET}")
                    print(f"{ticket_result}\n")

                    # Extract ticket ID from the result (look for INC-YYYYMMDD-NNN pattern)
                    import re
                    ticket_id_match = re.search(r'(INC-\d{8}-\d{3})', ticket_result)
                    if ticket_id_match:
                        ticket_id = ticket_id_match.group(1)
                        print(f"{tc.GREEN}Extracted Ticket ID: {ticket_id}{tc.RESET}\n")
                    else:
                        ticket_id = "INC-UNKNOWN-001"
                        print(f"{tc.YELLOW}Could not extract ticket ID, using default{tc.RESET}\n")

                finally:
                    # Cleanup report agent
                    try:
                        project_client.agents.delete_agent(report_agent.id)
                        print(f"Deleted report agent: {report_agent.id}\n")
                    except Exception as e:
                        print(f"Error deleting report agent: {e}\n")

            except Exception as e:
                print(f"{tc.RED}Error in Report Agent: {e}{tc.RESET}\n")
                ticket_id = "INC-ERROR-001"
        else:
            print(f"{tc.YELLOW}Report agent not available. Skipping ticket creation.{tc.RESET}\n")
            ticket_id = "INC-NOTAVAILABLE-001"

        # Step 3: Benefits Agent calculates financial impact and sends to Slack (with ticket ID)
        if HAS_BENEFITS_AGENT:
            print(f"{tc.GREEN}{'='*80}{tc.RESET}")
            print(f"{tc.GREEN}STEP 3: BENEFITS AGENT - Calculating Financial Impact & Sending to Slack{tc.RESET}")
            print(f"{tc.GREEN}{'='*80}{tc.RESET}\n")

            try:
                benefits_agent, benefits_thread = await create_benefits_agent()

                try:
                    # Construct the benefits analysis request
                    benefits_query = f"""
                    Please calculate the financial benefits of the following prevented issue:

                    Ticket ID: {ticket_id}
                    Original Problem: {incident_description}
                    Resolution: {resolution_result}

                    Context:
                    - VM Name: {vm_name}
                    - Downtime prevented: 30 minutes
                    - Issue type: High CPU usage
                    - Resolution method: {"Automated reboot" if "solved" in resolution_result.lower() or "rebooted" in resolution_result.lower() else "Escalated to support team"}

                    Please provide:
                    1. Direct cost savings (developer time, infrastructure)
                    2. Indirect benefits (preserved revenue, customer satisfaction)
                    3. Total financial impact with explanation

                    IMPORTANT: Include the Ticket ID "{ticket_id}" in your Slack message so it's clear this benefits analysis is related to the ticket that was just sent.

                    After completing your analysis, send the results to the Slack incident channel.
                    """

                    benefits_result = await post_to_benefits_agent(
                        thread_id=benefits_thread.id,
                        content=benefits_query,
                        agent=benefits_agent,
                        thread=benefits_thread
                    )

                    print(f"\n{tc.CYAN}Benefits Agent Analysis:{tc.RESET}")
                    print(f"{benefits_result}\n")

                finally:
                    # Cleanup benefits agent
                    try:
                        project_client.agents.delete_agent(benefits_agent.id)
                        print(f"Deleted benefits agent: {benefits_agent.id}\n")
                    except Exception as e:
                        print(f"Error deleting benefits agent: {e}\n")

            except Exception as e:
                print(f"{tc.RED}Error in Benefits Agent: {e}{tc.RESET}\n")
        else:
            print(f"{tc.YELLOW}Benefits agent not available. Skipping benefits analysis.{tc.RESET}\n")

        print(f"{tc.GREEN}{'='*80}{tc.RESET}")
        print(f"{tc.GREEN}MULTI-AGENT WORKFLOW COMPLETED{tc.RESET}")
        print(f"{tc.GREEN}{'='*80}{tc.RESET}\n")


if __name__ == "__main__":
    print("Starting multi-agent system...")
    asyncio.run(main())
    print("Program finished.")

